generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]  // Ensure pgvector extension is installed
}

model User {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  imageUrl     String?
  firstName    String?
  lastname     String?        
  emailAddress String         @unique

  credits      Int            @default(120)

  userToProjects UserToProject[]
  questionsAsked Question[]
  stripeTransactions StripeTransaction[]
}

model Project {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  deletedAt DateTime?

  name          String
  githubUrl     String?

  userToProjects UserToProject[]
  commits        Commit[]
  sourceCodeEmbeddings SourceCodeEmbedding[]
  savedQuestions Question[]
  meetings Meeting[]

  @@index([githubUrl]) // Add index for githubUrl if frequently queried
}

model UserToProject {
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  projectId String

  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model SourceCodeEmbedding {
  id              String   @id @default(cuid())
  summaryEmbedding Unsupported("vector(768)")? // Assuming pgvector is set up
  sourceCode      String
  fileName        String
  summary         String

  projectId       String
  project         Project @relation(fields: [projectId], references: [id])

  @@index([projectId]) // Add index for performance
}

model Meeting{
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meetingUrl String //firebase storage url
  projectId       String
  project         Project @relation(fields: [projectId], references: [id])
  name String

  status MeetingStatus @default(PROCESSING)
  issues Issue[]
}

model Issue{
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  start String
  end String
  gist String
  headline String
  summary String

  meetingId       String
  meeting         Meeting @relation(fields: [meetingId], references: [id])
}

model StripeTransaction{
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(fields:[userId],references:[id])
  credits Int
}

enum MeetingStatus{
  PROCESSING
  COMPLETED
}

model Question{
  id        String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String
  answer String

  fileReferences Json?

  projectId String
  project         Project @relation(fields: [projectId], references: [id])

  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Commit {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  projectId           String
  project             Project @relation(fields: [projectId], references: [id])

  commitMessage       String
  commitHash          String
  commitAuthorName    String
  commitAuthorAvatar String
  commitDate          DateTime

  // AI-generated summary
  summary             String

  @@index([projectId]) // Add index for performance
}
